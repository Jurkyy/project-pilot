use async_openai::{
    types::{ChatCompletionRequestMessageArgs, CreateChatCompletionRequestArgs, Role},
    Client,
};
use clap::Parser;
use std::{env, fs};
use tokio::main;

mod utils;

#[derive(Parser, Debug)]
#[command(author, version, about, long_about = None)]
struct Args {
    // Describe what the program should do, be as specific as possible
    #[arg(
        short,
        long,
        default_value = "An app that writes 'hello world' to the terminal"
    )]
    description: String,

    // The programming language to use
    #[arg(short, long, default_value = "javascript")]
    language: String,

    // The name of the project which will also be the name of the directory created
    #[arg(short, long, default_value = "myapp")]
    name: String,

    // The model to use, see https://platform.openai.com/docs/models for specific models
    #[arg(short, long, default_value = "gpt-3.5-turbo")]
    model: String,

    // Max allowed tokens
    // See https://beta.openai.com/docs/api-reference/completions/create#max_tokens
    // for more information
    // Default: 2048
    #[arg(short, long, default_value = "2048")]
    tokens: u16,

    // The path where to build the project.
    #[arg(short, long, default_value = "./")]
    path: String,
}

#[main]
async fn main() -> anyhow::Result<()> {
    // Check if the API key is set in the environment.
    if env::var("OPENAI_API_KEY").is_err() {
        eprintln!("OPENAI_API_KEY environment variable not set.\nExample:\nexport OPENAI_API_KEY=<your-api-key>");
        return Ok(());
    }

    // Parse cmdline arguments and build prompt.
    let args = Args::parse();
    let prompt = utils::generate_prompt(&args.name, &args.description, &args.language);

    println!("Sending prompt: {}", prompt);

    // Build the request to ChatGPT.
    let client = Client::new();
    let req = CreateChatCompletionRequestArgs::default()
        .max_tokens(args.tokens)
        .model(args.model)
        .messages([
            ChatCompletionRequestMessageArgs::default()
                .role(Role::System)
                .content(
                    "You are a helpful programming assistant.
                    You are expected to process an application description and generate the files and steps necessary to create the application using your language model.
                    You can only respond with a Json object that matches the provided output schema.
                    The returned Json can include an array of objects as defined by the output schema.
                    You are not allowed to return anything but a valid Json object.",
                )
                .build()?,
            ChatCompletionRequestMessageArgs::default()
                .role(Role::User)
                .content(prompt)
                .build()?,
        ])
        .build()?;

    println!("Sending prompt to OpenAI, please wait... ðŸ¤–");
    let res = client.chat().create(req).await?;
    println!("Got a response âœ… Attempting to decode the contents...");
    println!("Response:\n{}", &res.choices[0].message.content);
    let contents: utils::OutputJson = serde_json::from_str(&res.choices[0].message.content)
        .map_err(|e| {
            println!(
                "Failed to decode the contents, please try again. Sometimes OpenAI returns invalid JSON."
            );
            e
        })?;
    println!("Success, the robot has obeyed our orders.\n");

    println!("Generating the project files... ðŸ¤–");

    let project_name = args.name;
    let project_path = format!("{}/{}", args.path, project_name);
    println!("Creating project folder `{}`", project_path);
    fs::create_dir_all(&project_path)?;

    // Actually create the files.
    utils::create_file(
        &format!("{}/Dockerfile", project_path),
        &contents.dockerfile,
    )?;
    utils::create_file(&format!("{}/Makefile", project_path), &contents.makefile)?;
    utils::create_file(&format!("{}/README.md", project_path), &contents.readme)?;
    utils::create_source_files(&project_path, contents.source_files)?;

    // Explain how to use the generated project.
    println!("Project files generated successfully âœ…\n");
    println!("Disclaimer: This project was generated by a robot, please review the code before executing it.\n");
    println!("To execute the project, run the following commands:\n");
    println!("cd {}", project_name);
    println!("make build");
    println!("make run");

    Ok(())
}
